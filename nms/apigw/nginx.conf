user nginx;

worker_processes 1;

#By default NGINX container access.log and error.log are link to /dev/stdout and /dev/stderr. Hence we will log our logs to separate files
error_log /var/log/nginx/nginx_error.log debug;

events {
    worker_connections  1024;
}

http {
    keepalive_timeout  65;
    proxy_http_version 1.1;
    access_log off; #Disable logging, to enable selectively in specific location

    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" $kv_isallowed';

    log_format jwt '$remote_addr - $remote_user [$time_local] "$request" '
               '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
               '$jwt_claim_name $jwt_claim_uid';


    #Demo Rate limit
    limit_req_zone $remote_addr zone=perclient:1m rate=2r/s;

    upstream httpbin-backend {
        zone httpbin-backend 64k;
        server 10.1.1.10:7071;
        server 10.1.1.10:7072;
        #Demo persistency
        sticky cookie srv_id expires=1h;


    }

    #Demo API Key Authentication
    map $http_x_api_key $api_client_name {
        default "";
        "P5FcvLwkyN7eethF" "client_one";
        "UEt5QAEtiCYLKV5v" "client_two";
    }

    #Demo Key-Value Store - NGINX Plus feature
    keyval_zone zone=apikeyzone:32k state=/etc/nginx/apikey.keyval;
    keyval $http_x_kv_api_key $kv_isallowed zone=apikeyzone;


    server {
        listen 80;

        # #To redirect http(80) to https(443)
        return 301 https://$host$request_uri;

    }

    server {
        listen 443 ssl;

	#Demo SSL Termination
        ssl_certificate /etc/nginx/apigwdemo.com.crt; 
        ssl_certificate_key /etc/nginx/apigwdemo.com.key; 
        ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1; 
        ssl_prefer_server_ciphers on;


        # location / {
        #     #Add response header to demo load balancing
        #     add_header X-Upstream $upstream_addr;

        #     access_log /var/log/nginx/nginx_access.log main;

        #     proxy_pass http://httpbin-backend;
        # }


        location = /get {
            #Add response header to demo load balancing
            add_header X-Upstream $upstream_addr;

            access_log /var/log/nginx/nginx_access.log main;

            # #Rate-Limit applied as below
            limit_req zone=perclient nodelay;
            limit_req_status 429;  

            health_check; #NGINX Plus feature
            proxy_pass http://httpbin-backend;

        }

        location ~ "^/delay/[0-9]{1}$" {

            proxy_pass http://httpbin-backend;

        }


        location /post {

            if ( $request_method !~ ^(POST)$ ) {
                return 405;
            }
			
            #Demo API Key Authentication
            auth_request /_validate_apikey;

            proxy_pass http://httpbin-backend;

        }


        # API key validation
        location = /_validate_apikey {
            internal;

            if ($http_x_api_key = "") {
                return 401; # Unauthorized
            }
            if ($api_client_name = "") {
                return 403; # Forbidden
            }

            return 204; # OK (no content)
        }

        location /headers {

            #Demo JWT Authentication - NGINX Plus Feature
            auth_jwt on;
            auth_jwt_key_file /etc/nginx/api_secret.jwk;
            
            # JWT Authentication Logs
            access_log  /var/log/nginx/jwt.access.log jwt;


            if ( $jwt_claim_uid = 222 ) {
                add_header X-jwt-claim-uid "$jwt_claim_uid";
                add_header X-jwt-status "Redirected to Backend-API";
                
                proxy_pass http://httpbin-backend;
            } 

            if ( $jwt_claim_uid != 222 ) {
                return 403;
            }
	

        }

        location = /anything {
            
            access_log /var/log/nginx/nginx_access.log main;
            
            #Demo Key-Value store API Key authentication
            if ( $kv_isallowed != 1 ) {
                return 403;
            }

            proxy_pass http://httpbin-backend; 
        }

        #Return custom error message
        error_page 400 = @400;
        location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

        error_page 401 = @401;
        location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

        error_page 403 = @403;
        location @403 { return 403 '{"status":403,"message":"Forbidden"}\n'; }

        error_page 404 = @404;
        location @404 { return 404 '{"status":404,"message":"Resource not found"}\n'; }

        error_page 405 = @405;
        location @405 { return 405 '{"status":405,"message":"HTTP Method is not supported"}\n'; }

        error_page 429 = @429;
        location @429 { return 429 '{"status":429,"message":"Slow down. You are working too hard"}\n'; }
		
    }

    include /etc/nginx/conf.d/dashboard.conf; #NGINX Plus feature
}
